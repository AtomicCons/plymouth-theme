## System76 Pop Plymouth Theme

# Copyright 2017 System76, Inc.

// Load static images
bg_image = Image("bg.png");
logo_image = Image("logo.png");

// Get the logo dimensions
logo_width = logo_image.GetWidth();
logo_width_half = logo_width / 2;
logo_height = logo_image.GetHeight();
logo_height_half = logo_height / 2;

// Get the screen dimensions
screen_width = Window.GetWidth();
screen_width_half = screen_width / 2;
screen_height = Window.GetHeight();
screen_height_half = screen_height / 2;

// Set the warm gray background
scaled_bg_image = bg_image.Scale(screen_width, screen_height);
bg_sprite = Sprite(scaled_bg_image);

/* Figure out the logo's position
   This should be half of the screen size minus half of the logo size */
logo_x = Math.Int(screen_width_half - logo_width_half);
logo_y = Math.Int(screen_height_half - logo_height_half);

// Set and position the logo
logo_sprite = Sprite(logo_image);
logo_sprite.SetPosition(logo_x, logo_y, 0);

// Load frames for the "pill" animation
for (i = 8; i < 128; i++)
  pill_images[i] = Image("pill/pill-" + i + ".png");
pill_image_init = Image("pill/pill-127.png");
pill_sprite = Sprite();
pill_sprite.SetImage(pill_image_init);
pill_sprite.SetY(logo_y + 102);
pill_sprite.SetZ(10);
pill_sprite.SetX(logo_x + 345);

// Initialize some counters
progress = 128;
down = 1;

// Do the thing
fun refresh_callback (progress, down, logo_x)
  {
    if (progress > 126)
      down = 1;
    if (progress < 9)
      down = 0;
    if (down == 1)
      progress--;
    if (down == 0) 
      progress++;
    pill_sprite.SetImage(pill_images[progress]);
    pill_offset = pill_images[progress].GetWidth() / 2;
    pill_sprite.SetX(logo_x + 345 + 27.5 - pill_offset);
  }
  
Plymouth.SetRefreshFunction (refresh_callback);

#----------------------------------------- Dialogue --------------------------------

status = "normal";

fun dialog_setup()
  {
    local.box;
    local.lock;
    local.entry;
    
    box.image = Image("box.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");
    
    box.sprite = Sprite(box.image);
    box.x = Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
    box.y = Window.GetHeight() / 2 - box.image.GetHeight()/2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);
    
    lock.sprite = Sprite(lock.image);
    lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2 - 12;
    lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2 + 150;
    lock.z = box.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);
    
    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth() + 12;
    entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2 + 150;
    entry.z = box.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);
    
    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.bullet_image = Image("bullet.png");
    dialog_opacity (1);
  }
    
fun dialog_opacity(opacity)
  {
    dialog.box.sprite.SetOpacity (0);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    for (index = 0; dialog.bullet[index]; index++)
      {
        dialog.bullet[index].sprite.SetOpacity(opacity);
      }
  }

fun display_normal_callback ()
  {
    global.status = "normal";
    if (global.dialog)
      dialog_opacity (0);
  }

fun display_password_callback (prompt, bullets)
  {
    global.status = "password";
    if (!global.dialog)
	dialog_setup();
    else
	dialog_opacity(1);
    for (index = 0; dialog.bullet[index] || index < bullets; index++)
      {
        if (!dialog.bullet[index])
          {
            dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
            dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth() + 6;
            dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
          }
        if (index < bullets)
          dialog.bullet[index].sprite.SetOpacity(1);
        else
          dialog.bullet[index].sprite.SetOpacity(0);
      }
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);

#----------------------------------------- Progress Bar --------------------------------
/*
progress_box.image = Image("progress_box.png");
progress_box.sprite = Sprite(progress_box.image);

progress_box.x = Window.GetWidth()  / 2 -    progress_box.image.GetWidth()  / 2;
progress_box.y = Window.GetHeight() * 0.75 - progress_box.image.GetHeight() / 2;
progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 0);

progress_bar.original_image = Image("progress_bar.png");
progress_bar.sprite = Sprite();

progress_bar.x = Window.GetWidth()  / 2 -        progress_bar.original_image.GetWidth() / 2;
progress_bar.y = Window.GetHeight() / 2 * 1.5  - progress_box.image.GetHeight() / 2 + (progress_box.image.GetHeight() - progress_bar.original_image.GetHeight()) / 2;
progress_bar.sprite.SetPosition(progress_bar.x, progress_bar.y, 1);

fun progress_callback (duration, progress)
  {
    if (progress_bar.image.GetWidth () != Math.Int (progress_bar.original_image.GetWidth () * progress))
      {
        progress_bar.image = progress_bar.original_image.Scale(progress_bar.original_image.GetWidth(progress_bar.original_image) * progress, progress_bar.original_image.GetHeight());
        progress_bar.sprite.SetImage (progress_bar.image);
      }
  }

fun progress_callback (progress)
  {
    progress_status = "Blah";
  }

Plymouth.SetBootProgressFunction(progress_callback);*/

#----------------------------------------- Quit --------------------------------

fun quit_callback ()
{
}

Plymouth.SetQuitFunction(quit_callback);

#----------------------------------------- Message --------------------------------

message_sprite = Sprite();
message_sprite.SetPosition(10, 10, 10000);

fun message_callback (text)
{
  my_image = Image.Text(text, 1, 1, 1);
  message_sprite.SetImage(my_image);
}

Plymouth.SetMessageFunction(message_callback);

